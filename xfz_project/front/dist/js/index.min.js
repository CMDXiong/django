function Banner(){this.bannerWidth=798,this.bannerGroup=$("#banner-group"),this.index=1,this.leftArrow=$(".left-arrow"),this.rightArrow=$(".right-arrow"),this.bannerUI=$("#banner-ul"),this.liList=this.bannerUI.children("li"),this.bannercount=this.liList.length,this.pageControl=$(".page-control")}function Index(){var n=this;n.page=2,n.category_id=0,n.loadBtn=$("#load-more"),template.defaults.imports.timeSince=function(n){var e=new Date(n),t=e.getTime(),r=((new Date).getTime()-t)/1e3;return r<60?"刚刚":60<=r&&r<3600?(minutes=parseInt(r/60),minutes+"分钟前"):3600<=r&&r<86400?(hours=parseInt(r/60/60),hours+"小时前"):86400<=r&&r<2592e3?(days=parseInt(r/60/60/24),days+"天前"):e.getFullYear()+"/"+e.getMonth()+"/"+e.getDay()+" "+e.getHours()+":"+e.getMinutes()}}Banner.prototype.initBanner=function(){var n=this,e=n.liList.eq(0).clone(),t=n.liList.eq(n.bannercount-1).clone();n.bannerUI.prepend(t),n.bannerUI.append(e),n.bannerUI.css({width:(n.bannercount+2)*n.bannerWidth,left:-n.bannerWidth})},Banner.prototype.initPageControl=function(){for(var n=this,e=0;e<n.bannercount;e++){var t=$("<li></li>");n.pageControl.append(t),0===e&&t.addClass("active")}n.pageControl.css({width:12*n.bannercount+16+16*(n.bannercount-1)})},Banner.prototype.listenBannerHover=function(){var n=this;this.bannerGroup.hover(function(){clearInterval(n.timer),n.toggerArrow(!0)},function(){n.loop(),n.toggerArrow(!1)})},Banner.prototype.toggerArrow=function(n){var e=this;n?(e.leftArrow.show(),e.rightArrow.show()):(e.leftArrow.hide(),e.rightArrow.hide())},Banner.prototype.animate=function(){var n=this;n.bannerUI.stop().animate({left:-798*n.index},500);var e=n.index;e=0===e?n.bannercount-1:e===n.bannercount+1?0:n.index-1,n.pageControl.children().eq(e).addClass("active").siblings().removeClass("active")},Banner.prototype.loop=function(){var n=this;$("#banner-ul");this.timer=setInterval(function(){n.index>=n.bannercount+1?(n.bannerUI.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()},2e3)},Banner.prototype.listenArrowClick=function(){var n=this;n.leftArrow.click(function(){0===n.index?(n.bannerUI.css({left:-n.bannerWidth*n.bannercount}),n.index=n.bannercount-1):n.index--,n.animate()}),n.rightArrow.click(function(){n.index===n.bannercount+1?(n.bannerUI.css({left:-n.bannerWidth}),n.index=2):n.index++,n.animate()})},Banner.prototype.listenPageControl=function(){var t=this;t.pageControl.children("li").each(function(n,e){$(e).click(function(){t.index=n+1,t.animate()})})},Banner.prototype.run=function(){console.log("running..."),this.initBanner(),this.initPageControl(),this.loop(),this.listenBannerHover(),this.listenArrowClick(),this.listenPageControl()},Index.prototype.listenLoadMoreEvent=function(){var r=this;loadBtn=$("#load-more"),loadBtn.click(function(){var n=r.page;xfzajax.get({url:"/news/list/",data:{p:n,category_id:r.category_id},success:function(n){if(200===n.code){var e=n.data;if(0<e.length){var t=template("news-item",{newses:e});$(".list-inner-group").append(t),r.page+=1}else loadBtn.hide()}}})})},Index.prototype.listenCategorySwitchEvent=function(){var o=this;$(".list-tab").children().click(function(){var i=$(this),a=i.attr("data-category");xfzajax.get({url:"/news/list/",data:{category_id:a,p:1},success:function(n){if(200===n.code){var e=n.data,t=template("news-item",{newses:e}),r=$(".list-inner-group");r.empty(),r.append(t),o.page=2,o.category_id=a,i.addClass("active").siblings().removeClass("active"),o.loadBtn.show()}}})})},Index.prototype.run=function(){this.listenLoadMoreEvent(),this.listenCategorySwitchEvent()},$(function(){(new Banner).run(),(new Index).run()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
