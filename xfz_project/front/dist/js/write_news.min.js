function News(){}News.prototype.run=function(){this.listenQiniuUploadFileEvent()},News.prototype.listenUploadFileEvent=function(){var n=$("#thumbnail-btn");n.change(function(){var e=n[0].files[0],o=new FormData;o.append("file",e),xfzajax.post({url:"/cms/upload_file/",data:o,processData:!1,contentType:!1,success:function(e){if(200===e.code){var o=e.data.url;console.log(o),$("#thumbnail-form").val(o)}}})})},News.prototype.listenQiniuUploadFileEvent=function(){var r=this;$("#thumbnail-btn").change(function(){var i=this.files[0];xfzajax.get({url:"/cms/qntoken/",success:function(e){if(200===e.code){var o=e.data.token,n=(new Date).getTime()+"."+i.name.split(".")[1],t={fname:n,params:{},mimeType:["image/png","image/jpeg","image/fig"]},a={useCdnDomain:!0,retryCount:6,region:qiniu.region.z0};qiniu.upload(i,n,o,t,a).subscribe({next:r.handleFileUploadProgress,error:r.handleFileUploadError,complete:r.handleFileUploadComplete})}}})})},News.prototype.handleFileUploadProgress=function(e){var o=News.progressGroup,n=$(".progress-bar");n.css({width:"0"}),n.text("0%");var t=e.total.percent.toFixed(0)+"%";o.show(),n.css({width:t}),n.text(t)},News.prototype.handleFileUploadError=function(e){console.log(e.message),$("#progress-group").hide()},News.prototype.handleFileUploadComplete=function(e){$("#progress-group").hide();var o="http://q7jhogfwy.bkt.clouddn.com/"+e.key;$("input[name='thumbnail']").val(o)},$(function(){(new News).run(),News.progressGroup=$("#progress-group")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndyaXRlX25ld3MuanMiXSwibmFtZXMiOlsiTmV3cyIsInByb3RvdHlwZSIsInJ1biIsInRoaXMiLCJsaXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCIsImxpc3RlblVwbG9hZEZpbGVFdmVudCIsInVwbG9hZEJ0biIsIiQiLCJjaGFuZ2UiLCJmaWxlIiwiZmlsZXMiLCJmb3JtRGF0YSIsIkZvcm1EYXRhIiwiYXBwZW5kIiwieGZ6YWpheCIsInBvc3QiLCJ1cmwiLCJkYXRhIiwicHJvY2Vzc0RhdGEiLCJjb250ZW50VHlwZSIsInN1Y2Nlc3MiLCJyZXN1bHQiLCJjb25zb2xlIiwibG9nIiwidmFsIiwic2VsZiIsImdldCIsInRva2VuIiwia2V5IiwiRGF0ZSIsImdldFRpbWUiLCJuYW1lIiwic3BsaXQiLCJwdXRFeHRyYSIsImZuYW1lIiwicGFyYW1zIiwibWltZVR5cGUiLCJjb25maWciLCJ1c2VDZG5Eb21haW4iLCJyZXRyeUNvdW50IiwicmVnaW9uIiwicWluaXUiLCJ6MCIsInVwbG9hZCIsInN1YnNjcmliZSIsIm5leHQiLCJoYW5kbGVGaWxlVXBsb2FkUHJvZ3Jlc3MiLCJlcnJvciIsImhhbmRsZUZpbGVVcGxvYWRFcnJvciIsImNvbXBsZXRlIiwiaGFuZGxlRmlsZVVwbG9hZENvbXBsZXRlIiwicmVzcG9uc2UiLCJwcm9ncmVzc0dyb3VwIiwicHJvZ3Jlc3NCYXIiLCJjc3MiLCJ3aWR0aCIsInRleHQiLCJwZXJjZW50VGV4dCIsInRvdGFsIiwicGVyY2VudCIsInRvRml4ZWQiLCJzaG93IiwibWVzc2FnZSIsImhpZGUiXSwibWFwcGluZ3MiOiJBQUFBLFNBQVNBLFFBS1RBLEtBQUtDLFVBQVVDLElBQU0sV0FDTkMsS0FFTkMsOEJBSVRKLEtBQUtDLFVBQVVJLHNCQUF3QixXQUNuQyxJQUFJQyxFQUFZQyxFQUFFLGtCQUNsQkQsRUFBVUUsT0FBTyxXQUNiLElBQUlDLEVBQU9ILEVBQVUsR0FBR0ksTUFBTSxHQUMxQkMsRUFBVyxJQUFJQyxTQUNuQkQsRUFBU0UsT0FBTyxPQUFRSixHQUN4QkssUUFBUUMsS0FBSyxDQUNUQyxJQUFNLG9CQUNOQyxLQUFRTixFQUNSTyxhQUFjLEVBQ2RDLGFBQWUsRUFDZkMsUUFBVyxTQUFVQyxHQUNqQixHQUFzQixNQUFuQkEsRUFBYSxLQUFVLENBQ3RCLElBQUlMLEVBQU1LLEVBQWEsS0FBTyxJQUM5QkMsUUFBUUMsSUFBSVAsR0FDU1QsRUFBRSxtQkFDUmlCLElBQUlSLFVBUXZDaEIsS0FBS0MsVUFBVUcsMkJBQTZCLFdBQ3hDLElBQUlxQixFQUFPdEIsS0FDS0ksRUFBRSxrQkFDUkMsT0FBTyxXQUNiLElBQUlDLEVBQVFOLEtBQUtPLE1BQU0sR0FDdkJJLFFBQVFZLElBQUksQ0FDUlYsSUFBTyxnQkFDUEksUUFBVyxTQUFVQyxHQUNqQixHQUFzQixNQUFuQkEsRUFBYSxLQUFVLENBQ3RCLElBQUlNLEVBQVFOLEVBQWEsS0FBUyxNQUM5Qk8sR0FBTSxJQUFLQyxNQUFRQyxVQUFZLElBQU1yQixFQUFLc0IsS0FBS0MsTUFBTSxLQUFLLEdBQzFEQyxFQUFXLENBQ1hDLE1BQU9OLEVBQ1BPLE9BQU8sR0FDUEMsU0FBUyxDQUFDLFlBQWEsYUFBYyxjQUVyQ0MsRUFBUyxDQUNUQyxjQUFjLEVBQ2RDLFdBQVksRUFDWkMsT0FBUUMsTUFBTUQsT0FBT0UsSUFJUkQsTUFBTUUsT0FBT2xDLEVBQU1tQixFQUFLRCxFQUFPTSxFQUFVSSxHQUMvQ08sVUFBVSxDQUNqQkMsS0FBUXBCLEVBQUtxQix5QkFDYkMsTUFBU3RCLEVBQUt1QixzQkFDZEMsU0FBWXhCLEVBQUt5QixrQ0FTekNsRCxLQUFLQyxVQUFVNkMseUJBQTJCLFNBQVNLLEdBQy9DLElBQUlDLEVBQWdCcEQsS0FBS29ELGNBQ3JCQyxFQUFjOUMsRUFBRSxpQkFDcEI4QyxFQUFZQyxJQUFJLENBQUNDLE1BQVEsTUFDekJGLEVBQVlHLEtBQUssTUFDakIsSUFFSUMsRUFGUU4sRUFBU08sTUFDREMsUUFDTUMsUUFBUSxHQUFHLElBRXJDUixFQUFjUyxPQUVkUixFQUFZQyxJQUFJLENBQUNDLE1BQVFFLElBQ3pCSixFQUFZRyxLQUFLQyxJQUdyQnpELEtBQUtDLFVBQVUrQyxzQkFBd0IsU0FBU0QsR0FDNUN6QixRQUFRQyxJQUFJd0IsRUFBTWUsU0FDRXZELEVBQUUsbUJBQ1J3RCxRQUdsQi9ELEtBQUtDLFVBQVVpRCx5QkFBMkIsU0FBU0MsR0FDM0I1QyxFQUFFLG1CQUNSd0QsT0FDZCxJQUVJL0MsRUFGUyxvQ0FDRW1DLEVBQVN2QixJQUVIckIsRUFBRSwyQkFDUmlCLElBQUlSLElBR3ZCVCxFQUFFLFlBQ1ksSUFBSVAsTUFDVkUsTUFDTEYsS0FBS29ELGNBQWdCN0MsRUFBRSIsImZpbGUiOiJ3cml0ZV9uZXdzLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIE5ld3MoKSB7XG5cbn1cblxuXG5OZXdzLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIC8vIHNlbGYubGlzdGVuVXBsb2FkRmlsZUV2ZW50KCk7XG4gICAgc2VsZi5saXN0ZW5RaW5pdVVwbG9hZEZpbGVFdmVudCgpO1xuXG59O1xuXG5OZXdzLnByb3RvdHlwZS5saXN0ZW5VcGxvYWRGaWxlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHVwbG9hZEJ0biA9ICQoXCIjdGh1bWJuYWlsLWJ0blwiKTtcbiAgICB1cGxvYWRCdG4uY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpbGUgPSB1cGxvYWRCdG5bMF0uZmlsZXNbMF07XG4gICAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuICAgICAgICBmb3JtRGF0YS5hcHBlbmQoJ2ZpbGUnLCBmaWxlKTtcbiAgICAgICAgeGZ6YWpheC5wb3N0KHtcbiAgICAgICAgICAgICd1cmwnOicvY21zL3VwbG9hZF9maWxlLycsXG4gICAgICAgICAgICAnZGF0YSc6IGZvcm1EYXRhLFxuICAgICAgICAgICAgJ3Byb2Nlc3NEYXRhJzpmYWxzZSxcbiAgICAgICAgICAgICdjb250ZW50VHlwZSc6IGZhbHNlLFxuICAgICAgICAgICAgJ3N1Y2Nlc3MnOiBmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgaWYocmVzdWx0Wydjb2RlJ10gPT09IDIwMCl7XG4gICAgICAgICAgICAgICAgICAgIHZhciB1cmwgPSByZXN1bHRbJ2RhdGEnXVsndXJsJ107XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKHVybCk7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aHVtYm5haWxJbnB1dCA9ICQoXCIjdGh1bWJuYWlsLWZvcm1cIilcbiAgICAgICAgICAgICAgICAgICAgdGh1bWJuYWlsSW5wdXQudmFsKHVybCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG5cbiAgICB9KTtcbn07XG5cbk5ld3MucHJvdG90eXBlLmxpc3RlblFpbml1VXBsb2FkRmlsZUV2ZW50ID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgdmFyIHVwbG9hZEJ0biA9ICQoXCIjdGh1bWJuYWlsLWJ0blwiKTtcbiAgICB1cGxvYWRCdG4uY2hhbmdlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGZpbGUgID0gdGhpcy5maWxlc1swXTtcbiAgICAgICAgeGZ6YWpheC5nZXQoe1xuICAgICAgICAgICAgJ3VybCc6ICcvY21zL3FudG9rZW4vJyxcbiAgICAgICAgICAgICdzdWNjZXNzJzogZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmKHJlc3VsdFsnY29kZSddID09PSAyMDApe1xuICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW4gPSByZXN1bHRbJ2RhdGEnXVsndG9rZW4nXVxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSArICcuJyArIGZpbGUubmFtZS5zcGxpdCgnLicpWzFdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHV0RXh0cmEgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOnt9LFxuICAgICAgICAgICAgICAgICAgICAgICAgbWltZVR5cGU6WydpbWFnZS9wbmcnLCAnaW1hZ2UvanBlZycsICdpbWFnZS9maWcnXVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB2YXIgY29uZmlnID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXNlQ2RuRG9tYWluOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0cnlDb3VudDogNixcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lvbjogcWluaXUucmVnaW9uLnowLFxuXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmFibGUgPSBxaW5pdS51cGxvYWQoZmlsZSwga2V5LCB0b2tlbiwgcHV0RXh0cmEsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICduZXh0Jzogc2VsZi5oYW5kbGVGaWxlVXBsb2FkUHJvZ3Jlc3MsXG4gICAgICAgICAgICAgICAgICAgICAgICAnZXJyb3InOiBzZWxmLmhhbmRsZUZpbGVVcGxvYWRFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICdjb21wbGV0ZSc6IHNlbGYuaGFuZGxlRmlsZVVwbG9hZENvbXBsZXRlXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIH0pO1xufTtcblxuTmV3cy5wcm90b3R5cGUuaGFuZGxlRmlsZVVwbG9hZFByb2dyZXNzID0gZnVuY3Rpb24ocmVzcG9uc2Upe1xuICAgIHZhciBwcm9ncmVzc0dyb3VwID0gTmV3cy5wcm9ncmVzc0dyb3VwO1xuICAgIHZhciBwcm9ncmVzc0JhciA9ICQoXCIucHJvZ3Jlc3MtYmFyXCIpO1xuICAgIHByb2dyZXNzQmFyLmNzcyh7J3dpZHRoJzonMCd9KTtcbiAgICBwcm9ncmVzc0Jhci50ZXh0KCcwJScpO1xuICAgIHZhciB0b3RhbCA9IHJlc3BvbnNlLnRvdGFsO1xuICAgIHZhciBwZXJjZW50ID0gdG90YWwucGVyY2VudDtcbiAgICB2YXIgcGVyY2VudFRleHQgPSBwZXJjZW50LnRvRml4ZWQoMCkrJyUnO1xuXG4gICAgcHJvZ3Jlc3NHcm91cC5zaG93KCk7XG5cbiAgICBwcm9ncmVzc0Jhci5jc3Moeyd3aWR0aCc6cGVyY2VudFRleHR9KTtcbiAgICBwcm9ncmVzc0Jhci50ZXh0KHBlcmNlbnRUZXh0KTtcbn07XG5cbk5ld3MucHJvdG90eXBlLmhhbmRsZUZpbGVVcGxvYWRFcnJvciA9IGZ1bmN0aW9uKGVycm9yKXtcbiAgICBjb25zb2xlLmxvZyhlcnJvci5tZXNzYWdlKTtcbiAgICB2YXIgcHJvZ3Jlc3NHcm91cCA9ICQoXCIjcHJvZ3Jlc3MtZ3JvdXBcIik7XG4gICAgcHJvZ3Jlc3NHcm91cC5oaWRlKCk7XG59O1xuXG5OZXdzLnByb3RvdHlwZS5oYW5kbGVGaWxlVXBsb2FkQ29tcGxldGUgPSBmdW5jdGlvbihyZXNwb25zZSl7XG4gICAgdmFyIHByb2dyZXNzR3JvdXAgPSAkKFwiI3Byb2dyZXNzLWdyb3VwXCIpO1xuICAgIHByb2dyZXNzR3JvdXAuaGlkZSgpO1xuICAgIHZhciBkb21haW4gPSAnaHR0cDovL3E3amhvZ2Z3eS5ia3QuY2xvdWRkbi5jb20vJztcbiAgICB2YXIgZmlsZW5hbWUgPSByZXNwb25zZS5rZXk7XG4gICAgdmFyIHVybCA9IGRvbWFpbiArIGZpbGVuYW1lO1xuICAgIHZhciB0aHVtYm5haWxJbnB1dCA9ICQoXCJpbnB1dFtuYW1lPSd0aHVtYm5haWwnXVwiKTtcbiAgICB0aHVtYm5haWxJbnB1dC52YWwodXJsKTtcbn07XG5cbiQoZnVuY3Rpb24gKCkge1xuICAgdmFyIG5ld3MgPSBuZXcgTmV3cygpO1xuICAgbmV3cy5ydW4oKTtcbiAgIE5ld3MucHJvZ3Jlc3NHcm91cCA9ICQoXCIjcHJvZ3Jlc3MtZ3JvdXBcIik7XG59KTsiXX0=
